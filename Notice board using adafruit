
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display


#define WLAN_SSID       "Redmi"
#define WLAN_PASS       "12345678"


#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "KavyaPG"
#define AIO_KEY         "aio_RSJc309rleX02T10s7rtrSltxfio"
int flg=0;
WiFiClient client;

Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/


Adafruit_MQTT_Publish photocell = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/input");
Adafruit_MQTT_Publish p = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/in2");
Adafruit_MQTT_Subscribe o = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/analog");

void MQTT_connect();

void setup() {
  Serial.begin(115200);
  delay(10);

  Serial.println(F("Adafruit MQTT demo"));
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);//
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());

mqtt.subscribe(&o);
  lcd.begin();
  // Print a message to the LCD.
  lcd.backlight();
 
}

uint32_t x=0;

void loop() {
String a;

  MQTT_connect();
Adafruit_MQTT_Subscribe *subscription;
  // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here

/* 30 data/min
 60sec   
 1  2sec*/
// uint_t* a;
while ((subscription = mqtt.readSubscription(5000))) {
    if (subscription == &o) {
      Serial.print("Got: ");
 a=(char *)o.lastread;
      Serial.println(strcmp((char *)o.lastread,"1"));    }
  }

  if(a=="1")
  {
  lcd.clear();
  lcd.setCursor(3,0);
   lcd.print("LCD UNDER MAINTANANCE");
   lcd.setCursor(0,1);
    lcd.print("PRESS KEY");
  flg++;
  }
  else
  {
    if(flg!=0)
    {
    lcd.setCursor(3,0);
    lcd.print("LATEST UPDATES!!     ");
    Serial.print(a);
    lcd.setCursor(0,1);
    lcd.print("LCD OK");
    flg=0;
    }
  else
    {   
    lcd.setCursor(3,0);
    lcd.print("LATEST UPDATES!!     ");
    Serial.print(a);
    lcd.setCursor(0,1);
    lcd.print(a);
    }
  }
   for (int positionCounter = 0; positionCounter < 29; positionCounter++) {
    lcd.scrollDisplayLeft();
    delay(300); }
   delay(1000); 
}


void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}

